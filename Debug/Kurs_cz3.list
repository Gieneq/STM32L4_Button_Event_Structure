
Kurs_cz3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002328  08002328  00012328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023b8  080023b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023b8  080023b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023b8  080023b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023b8  080023b8  000123b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023bc  080023bc  000123bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  080023cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  080023cc  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bf0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001725  00000000  00000000  00027c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  00029358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  00029af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249ca  00000000  00000000  0002a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e53  00000000  00000000  0004eb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0bc5  00000000  00000000  000569ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001375b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c98  00000000  00000000  00137608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002310 	.word	0x08002310

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002310 	.word	0x08002310

080001c8 <led_set>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void led_set(int led, bool turn_on) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
	GPIO_PinState state = (turn_on) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	73fb      	strb	r3, [r7, #15]

	if (led >= 0 && led < LEDS_COUNT)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	db10      	blt.n	8000200 <led_set+0x38>
 80001de:	220a      	movs	r2, #10
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4293      	cmp	r3, r2
 80001e4:	da0c      	bge.n	8000200 <led_set+0x38>
		HAL_GPIO_WritePin(LED[led].port, LED[led].pin, state);
 80001e6:	4a08      	ldr	r2, [pc, #32]	; (8000208 <led_set+0x40>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80001ee:	4a06      	ldr	r2, [pc, #24]	; (8000208 <led_set+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	00db      	lsls	r3, r3, #3
 80001f4:	4413      	add	r3, r2
 80001f6:	889b      	ldrh	r3, [r3, #4]
 80001f8:	7bfa      	ldrb	r2, [r7, #15]
 80001fa:	4619      	mov	r1, r3
 80001fc:	f000 fd20 	bl	8000c40 <HAL_GPIO_WritePin>
}
 8000200:	bf00      	nop
 8000202:	3710      	adds	r7, #16
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	08002328 	.word	0x08002328

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000210:	f000 f9ed 	bl	80005ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000214:	f000 f822 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000218:	f000 f8aa 	bl	8000370 <MX_GPIO_Init>
  MX_RNG_Init();
 800021c:	f000 f894 	bl	8000348 <MX_RNG_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	led_set(led, true);
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <main+0x48>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2101      	movs	r1, #1
 8000226:	4618      	mov	r0, r3
 8000228:	f7ff ffce 	bl	80001c8 <led_set>
	while (1) {
//		checkAllButtonsEvents();
//		animate(false);

		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000232:	4809      	ldr	r0, [pc, #36]	; (8000258 <main+0x4c>)
 8000234:	f000 fd04 	bl	8000c40 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8000238:	20c8      	movs	r0, #200	; 0xc8
 800023a:	f000 fa4d 	bl	80006d8 <HAL_Delay>
		  // Wyłączamy diodę na 800ms
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <main+0x4c>)
 8000246:	f000 fcfb 	bl	8000c40 <HAL_GPIO_WritePin>
		  HAL_Delay(800);
 800024a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800024e:	f000 fa43 	bl	80006d8 <HAL_Delay>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000252:	e7eb      	b.n	800022c <main+0x20>
 8000254:	20000028 	.word	0x20000028
 8000258:	48000400 	.word	0x48000400

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b0b8      	sub	sp, #224	; 0xe0
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000266:	2244      	movs	r2, #68	; 0x44
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 f848 	bl	8002300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000280:	463b      	mov	r3, r7
 8000282:	2288      	movs	r2, #136	; 0x88
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 f83a 	bl	8002300 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800028c:	2310      	movs	r3, #16
 800028e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800029e:	2360      	movs	r3, #96	; 0x60
 80002a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a4:	2300      	movs	r3, #0
 80002a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fd42 	bl	8000d38 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002ba:	f000 f8c9 	bl	8000450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002c4:	2300      	movs	r3, #0
 80002c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 f90e 	bl	8001504 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002ee:	f000 f8af 	bl	8000450 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80002f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80002f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80002f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80002fc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002fe:	2301      	movs	r3, #1
 8000300:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000302:	2301      	movs	r3, #1
 8000304:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000306:	2310      	movs	r3, #16
 8000308:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800030a:	2307      	movs	r3, #7
 800030c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000316:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800031a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031c:	463b      	mov	r3, r7
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fabe 	bl	80018a0 <HAL_RCCEx_PeriphCLKConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800032a:	f000 f891 	bl	8000450 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800032e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000332:	f000 fcab 	bl	8000c8c <HAL_PWREx_ControlVoltageScaling>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800033c:	f000 f888 	bl	8000450 <Error_Handler>
  }
}
 8000340:	bf00      	nop
 8000342:	37e0      	adds	r7, #224	; 0xe0
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_RNG_Init+0x20>)
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <MX_RNG_Init+0x24>)
 8000350:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_RNG_Init+0x20>)
 8000354:	f001 ff60 	bl	8002218 <HAL_RNG_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800035e:	f000 f877 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000002c 	.word	0x2000002c
 800036c:	50060800 	.word	0x50060800

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000386:	4b2f      	ldr	r3, [pc, #188]	; (8000444 <MX_GPIO_Init+0xd4>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	4a2e      	ldr	r2, [pc, #184]	; (8000444 <MX_GPIO_Init+0xd4>)
 800038c:	f043 0304 	orr.w	r3, r3, #4
 8000390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000392:	4b2c      	ldr	r3, [pc, #176]	; (8000444 <MX_GPIO_Init+0xd4>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	f003 0304 	and.w	r3, r3, #4
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039e:	4b29      	ldr	r3, [pc, #164]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	4a28      	ldr	r2, [pc, #160]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003aa:	4b26      	ldr	r3, [pc, #152]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b6:	4b23      	ldr	r3, [pc, #140]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	4a22      	ldr	r2, [pc, #136]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003bc:	f043 0302 	orr.w	r3, r3, #2
 80003c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c2:	4b20      	ldr	r3, [pc, #128]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	f003 0302 	and.w	r3, r3, #2
 80003ca:	603b      	str	r3, [r7, #0]
 80003cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2120      	movs	r1, #32
 80003d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d6:	f000 fc33 	bl	8000c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin
 80003da:	2200      	movs	r2, #0
 80003dc:	f647 71e0 	movw	r1, #32736	; 0x7fe0
 80003e0:	4819      	ldr	r0, [pc, #100]	; (8000448 <MX_GPIO_Init+0xd8>)
 80003e2:	f000 fc2d 	bl	8000c40 <HAL_GPIO_WritePin>
                          |LED10_Pin|LED1_Pin|LED2_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : USER_BUTTON_Pin BUTTON_MODE_Pin BUTTON_BACKWARD_Pin BUTTON_FORWARD_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|BUTTON_MODE_Pin|BUTTON_BACKWARD_Pin|BUTTON_FORWARD_Pin;
 80003e6:	f44f 530e 	mov.w	r3, #9088	; 0x2380
 80003ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003f0:	2301      	movs	r3, #1
 80003f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	4619      	mov	r1, r3
 80003fa:	4814      	ldr	r0, [pc, #80]	; (800044c <MX_GPIO_Init+0xdc>)
 80003fc:	f000 fa76 	bl	80008ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000400:	2320      	movs	r3, #32
 8000402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000410:	f107 030c 	add.w	r3, r7, #12
 8000414:	4619      	mov	r1, r3
 8000416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041a:	f000 fa67 	bl	80008ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin LED7_Pin LED8_Pin LED9_Pin
                           LED10_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin
 800041e:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 8000422:	60fb      	str	r3, [r7, #12]
                          |LED10_Pin|LED1_Pin|LED2_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000424:	2301      	movs	r3, #1
 8000426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000430:	f107 030c 	add.w	r3, r7, #12
 8000434:	4619      	mov	r1, r3
 8000436:	4804      	ldr	r0, [pc, #16]	; (8000448 <MX_GPIO_Init+0xd8>)
 8000438:	f000 fa58 	bl	80008ec <HAL_GPIO_Init>

}
 800043c:	bf00      	nop
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40021000 	.word	0x40021000
 8000448:	48000400 	.word	0x48000400
 800044c:	48000800 	.word	0x48000800

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000458:	e7fe      	b.n	8000458 <Error_Handler+0x8>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x44>)
 8000464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <HAL_MspInit+0x44>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6613      	str	r3, [r2, #96]	; 0x60
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_MspInit+0x44>)
 8000470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_MspInit+0x44>)
 800047c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <HAL_MspInit+0x44>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	6593      	str	r3, [r2, #88]	; 0x58
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_MspInit+0x44>)
 8000488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <HAL_RNG_MspInit+0x38>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d10b      	bne.n	80004ce <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <HAL_RNG_MspInit+0x3c>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	4a09      	ldr	r2, [pc, #36]	; (80004e0 <HAL_RNG_MspInit+0x3c>)
 80004bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c2:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <HAL_RNG_MspInit+0x3c>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	50060800 	.word	0x50060800
 80004e0:	40021000 	.word	0x40021000

080004e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <NMI_Handler+0x4>

080004ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <HardFault_Handler+0x4>

080004f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <MemManage_Handler+0x4>

080004f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <BusFault_Handler+0x4>

080004fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <UsageFault_Handler+0x4>

08000502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000530:	f000 f8b2 	bl	8000698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}

08000538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <SystemInit+0x5c>)
 800053e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000542:	4a14      	ldr	r2, [pc, #80]	; (8000594 <SystemInit+0x5c>)
 8000544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <SystemInit+0x60>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a11      	ldr	r2, [pc, #68]	; (8000598 <SystemInit+0x60>)
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <SystemInit+0x60>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <SystemInit+0x60>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <SystemInit+0x60>)
 8000564:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000568:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800056c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <SystemInit+0x60>)
 8000570:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000574:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <SystemInit+0x60>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <SystemInit+0x60>)
 800057c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000580:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <SystemInit+0x60>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00
 8000598:	40021000 	.word	0x40021000

0800059c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a0:	f7ff ffca 	bl	8000538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005a6:	e003      	b.n	80005b0 <LoopCopyDataInit>

080005a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005ae:	3104      	adds	r1, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005b0:	480a      	ldr	r0, [pc, #40]	; (80005dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005b8:	d3f6      	bcc.n	80005a8 <CopyDataInit>
	ldr	r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005bc:	e002      	b.n	80005c4 <LoopFillZerobss>

080005be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005c0:	f842 3b04 	str.w	r3, [r2], #4

080005c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <LoopForever+0x16>)
	cmp	r2, r3
 80005c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005c8:	d3f9      	bcc.n	80005be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ca:	f001 fe75 	bl	80022b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ce:	f7ff fe1d 	bl	800020c <main>

080005d2 <LoopForever>:

LoopForever:
    b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005d8:	080023c0 	.word	0x080023c0
	ldr	r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005e0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80005e4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80005e8:	20000040 	.word	0x20000040

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>

080005ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f943 	bl	8000884 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f80e 	bl	8000620 <HAL_InitTick>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	e001      	b.n	8000614 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000610:	f7ff ff24 	bl	800045c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000614:	79fb      	ldrb	r3, [r7, #7]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_InitTick+0x6c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d023      	beq.n	800067c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_InitTick+0x70>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <HAL_InitTick+0x6c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000642:	fbb3 f3f1 	udiv	r3, r3, r1
 8000646:	fbb2 f3f3 	udiv	r3, r2, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f941 	bl	80008d2 <HAL_SYSTICK_Config>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10f      	bne.n	8000676 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0f      	cmp	r3, #15
 800065a:	d809      	bhi.n	8000670 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f000 f919 	bl	800089a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <HAL_InitTick+0x74>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	e007      	b.n	8000680 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	e004      	b.n	8000680 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e001      	b.n	8000680 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000680:	7bfb      	ldrb	r3, [r7, #15]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000008 	.word	0x20000008
 8000690:	20000000 	.word	0x20000000
 8000694:	20000004 	.word	0x20000004

08000698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x20>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x24>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_IncTick+0x24>)
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000008 	.word	0x20000008
 80006bc:	2000003c 	.word	0x2000003c

080006c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_GetTick+0x14>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	2000003c 	.word	0x2000003c

080006d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e0:	f7ff ffee 	bl	80006c0 <HAL_GetTick>
 80006e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f0:	d005      	beq.n	80006fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_Delay+0x44>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006fe:	bf00      	nop
 8000700:	f7ff ffde 	bl	80006c0 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8f7      	bhi.n	8000700 <HAL_Delay+0x28>
  {
  }
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000008 	.word	0x20000008

08000720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000752:	4a04      	ldr	r2, [pc, #16]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	60d3      	str	r3, [r2, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <__NVIC_GetPriorityGrouping+0x18>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	f003 0307 	and.w	r3, r3, #7
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000850:	d301      	bcc.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e00f      	b.n	8000876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <SysTick_Config+0x40>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	210f      	movs	r1, #15
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f7ff ff8e 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SysTick_Config+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SysTick_Config+0x40>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff47 	bl	8000720 <__NVIC_SetPriorityGrouping>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008ac:	f7ff ff5c 	bl	8000768 <__NVIC_GetPriorityGrouping>
 80008b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	6978      	ldr	r0, [r7, #20]
 80008b8:	f7ff ff8e 	bl	80007d8 <NVIC_EncodePriority>
 80008bc:	4602      	mov	r2, r0
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff5d 	bl	8000784 <__NVIC_SetPriority>
}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ffb0 	bl	8000840 <SysTick_Config>
 80008e0:	4603      	mov	r3, r0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fa:	e17f      	b.n	8000bfc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 8171 	beq.w	8000bf6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d00b      	beq.n	8000934 <HAL_GPIO_Init+0x48>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d007      	beq.n	8000934 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000928:	2b11      	cmp	r3, #17
 800092a:	d003      	beq.n	8000934 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b12      	cmp	r3, #18
 8000932:	d130      	bne.n	8000996 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	2203      	movs	r2, #3
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800096a:	2201      	movs	r2, #1
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	091b      	lsrs	r3, r3, #4
 8000980:	f003 0201 	and.w	r2, r3, #1
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f003 0303 	and.w	r3, r3, #3
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d118      	bne.n	80009d4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009a8:	2201      	movs	r2, #1
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	08db      	lsrs	r3, r3, #3
 80009be:	f003 0201 	and.w	r2, r3, #1
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	2203      	movs	r2, #3
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d003      	beq.n	8000a14 <HAL_GPIO_Init+0x128>
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b12      	cmp	r3, #18
 8000a12:	d123      	bne.n	8000a5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	08da      	lsrs	r2, r3, #3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f003 0307 	and.w	r3, r3, #7
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	691a      	ldr	r2, [r3, #16]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	08da      	lsrs	r2, r3, #3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3208      	adds	r2, #8
 8000a56:	6939      	ldr	r1, [r7, #16]
 8000a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	2203      	movs	r2, #3
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0203 	and.w	r2, r3, #3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f000 80ac 	beq.w	8000bf6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <HAL_GPIO_Init+0x330>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa2:	4a5e      	ldr	r2, [pc, #376]	; (8000c1c <HAL_GPIO_Init+0x330>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aaa:	4b5c      	ldr	r3, [pc, #368]	; (8000c1c <HAL_GPIO_Init+0x330>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ab6:	4a5a      	ldr	r2, [pc, #360]	; (8000c20 <HAL_GPIO_Init+0x334>)
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	3302      	adds	r3, #2
 8000abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	220f      	movs	r2, #15
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ae0:	d025      	beq.n	8000b2e <HAL_GPIO_Init+0x242>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a4f      	ldr	r2, [pc, #316]	; (8000c24 <HAL_GPIO_Init+0x338>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d01f      	beq.n	8000b2a <HAL_GPIO_Init+0x23e>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a4e      	ldr	r2, [pc, #312]	; (8000c28 <HAL_GPIO_Init+0x33c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d019      	beq.n	8000b26 <HAL_GPIO_Init+0x23a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a4d      	ldr	r2, [pc, #308]	; (8000c2c <HAL_GPIO_Init+0x340>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d013      	beq.n	8000b22 <HAL_GPIO_Init+0x236>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a4c      	ldr	r2, [pc, #304]	; (8000c30 <HAL_GPIO_Init+0x344>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d00d      	beq.n	8000b1e <HAL_GPIO_Init+0x232>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a4b      	ldr	r2, [pc, #300]	; (8000c34 <HAL_GPIO_Init+0x348>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d007      	beq.n	8000b1a <HAL_GPIO_Init+0x22e>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4a      	ldr	r2, [pc, #296]	; (8000c38 <HAL_GPIO_Init+0x34c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_GPIO_Init+0x22a>
 8000b12:	2306      	movs	r3, #6
 8000b14:	e00c      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b16:	2307      	movs	r3, #7
 8000b18:	e00a      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	e008      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b1e:	2304      	movs	r3, #4
 8000b20:	e006      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b22:	2303      	movs	r3, #3
 8000b24:	e004      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b26:	2302      	movs	r3, #2
 8000b28:	e002      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e000      	b.n	8000b30 <HAL_GPIO_Init+0x244>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	f002 0203 	and.w	r2, r2, #3
 8000b36:	0092      	lsls	r2, r2, #2
 8000b38:	4093      	lsls	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b40:	4937      	ldr	r1, [pc, #220]	; (8000c20 <HAL_GPIO_Init+0x334>)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	3302      	adds	r3, #2
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	43db      	mvns	r3, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d003      	beq.n	8000b9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b9c:	4a27      	ldr	r2, [pc, #156]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bc6:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bf0:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <HAL_GPIO_Init+0x350>)
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa22 f303 	lsr.w	r3, r2, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f47f ae78 	bne.w	80008fc <HAL_GPIO_Init+0x10>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000
 8000c24:	48000400 	.word	0x48000400
 8000c28:	48000800 	.word	0x48000800
 8000c2c:	48000c00 	.word	0x48000c00
 8000c30:	48001000 	.word	0x48001000
 8000c34:	48001400 	.word	0x48001400
 8000c38:	48001800 	.word	0x48001800
 8000c3c:	40010400 	.word	0x40010400

08000c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c50:	787b      	ldrb	r3, [r7, #1]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c5c:	e002      	b.n	8000c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40007000 	.word	0x40007000

08000c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c9a:	d130      	bne.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ca8:	d038      	beq.n	8000d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2232      	movs	r2, #50	; 0x32
 8000cc0:	fb02 f303 	mul.w	r3, r2, r3
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	0c9b      	lsrs	r3, r3, #18
 8000ccc:	3301      	adds	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cd0:	e002      	b.n	8000cd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce4:	d102      	bne.n	8000cec <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1f2      	bne.n	8000cd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf8:	d110      	bne.n	8000d1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e00f      	b.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d0a:	d007      	beq.n	8000d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40007000 	.word	0x40007000
 8000d30:	20000000 	.word	0x20000000
 8000d34:	431bde83 	.word	0x431bde83

08000d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e3d4      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d4a:	4ba1      	ldr	r3, [pc, #644]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 030c 	and.w	r3, r3, #12
 8000d52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d54:	4b9e      	ldr	r3, [pc, #632]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 80e4 	beq.w	8000f34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <HAL_RCC_OscConfig+0x4a>
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	2b0c      	cmp	r3, #12
 8000d76:	f040 808b 	bne.w	8000e90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	f040 8087 	bne.w	8000e90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d82:	4b93      	ldr	r3, [pc, #588]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <HAL_RCC_OscConfig+0x62>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e3ac      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a1a      	ldr	r2, [r3, #32]
 8000d9e:	4b8c      	ldr	r3, [pc, #560]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d004      	beq.n	8000db4 <HAL_RCC_OscConfig+0x7c>
 8000daa:	4b89      	ldr	r3, [pc, #548]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000db2:	e005      	b.n	8000dc0 <HAL_RCC_OscConfig+0x88>
 8000db4:	4b86      	ldr	r3, [pc, #536]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d223      	bcs.n	8000e0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 fd09 	bl	80017e0 <RCC_SetFlashLatencyFromMSIRange>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e38d      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dd8:	4b7d      	ldr	r3, [pc, #500]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a7c      	ldr	r2, [pc, #496]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b7a      	ldr	r3, [pc, #488]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	4977      	ldr	r1, [pc, #476]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000df2:	4313      	orrs	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df6:	4b76      	ldr	r3, [pc, #472]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	4972      	ldr	r1, [pc, #456]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000e06:	4313      	orrs	r3, r2
 8000e08:	604b      	str	r3, [r1, #4]
 8000e0a:	e025      	b.n	8000e58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e0c:	4b70      	ldr	r3, [pc, #448]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a6f      	ldr	r2, [pc, #444]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b6d      	ldr	r3, [pc, #436]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	496a      	ldr	r1, [pc, #424]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e2a:	4b69      	ldr	r3, [pc, #420]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	4965      	ldr	r1, [pc, #404]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d109      	bne.n	8000e58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fcc9 	bl	80017e0 <RCC_SetFlashLatencyFromMSIRange>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e34d      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e58:	f000 fc36 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4b5c      	ldr	r3, [pc, #368]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	495a      	ldr	r1, [pc, #360]	; (8000fd4 <HAL_RCC_OscConfig+0x29c>)
 8000e6a:	5ccb      	ldrb	r3, [r1, r3]
 8000e6c:	f003 031f 	and.w	r3, r3, #31
 8000e70:	fa22 f303 	lsr.w	r3, r2, r3
 8000e74:	4a58      	ldr	r2, [pc, #352]	; (8000fd8 <HAL_RCC_OscConfig+0x2a0>)
 8000e76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e78:	4b58      	ldr	r3, [pc, #352]	; (8000fdc <HAL_RCC_OscConfig+0x2a4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fbcf 	bl	8000620 <HAL_InitTick>
 8000e82:	4603      	mov	r3, r0
 8000e84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d052      	beq.n	8000f32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	e331      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d032      	beq.n	8000efe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e98:	4b4d      	ldr	r3, [pc, #308]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a4c      	ldr	r2, [pc, #304]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fc0c 	bl	80006c0 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eac:	f7ff fc08 	bl	80006c0 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e31a      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ebe:	4b44      	ldr	r3, [pc, #272]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f0      	beq.n	8000eac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eca:	4b41      	ldr	r3, [pc, #260]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a40      	ldr	r2, [pc, #256]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	493b      	ldr	r1, [pc, #236]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee8:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	4936      	ldr	r1, [pc, #216]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]
 8000efc:	e01a      	b.n	8000f34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a33      	ldr	r2, [pc, #204]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000f04:	f023 0301 	bic.w	r3, r3, #1
 8000f08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fbd9 	bl	80006c0 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f12:	f7ff fbd5 	bl	80006c0 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e2e7      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f0      	bne.n	8000f12 <HAL_RCC_OscConfig+0x1da>
 8000f30:	e000      	b.n	8000f34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d074      	beq.n	800102a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d005      	beq.n	8000f52 <HAL_RCC_OscConfig+0x21a>
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	d10e      	bne.n	8000f6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d10b      	bne.n	8000f6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d064      	beq.n	8001028 <HAL_RCC_OscConfig+0x2f0>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d160      	bne.n	8001028 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e2c4      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f72:	d106      	bne.n	8000f82 <HAL_RCC_OscConfig+0x24a>
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	e01d      	b.n	8000fbe <HAL_RCC_OscConfig+0x286>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8a:	d10c      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x26e>
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	e00b      	b.n	8000fbe <HAL_RCC_OscConfig+0x286>
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_RCC_OscConfig+0x298>)
 8000fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d01c      	beq.n	8001000 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb7b 	bl	80006c0 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fcc:	e011      	b.n	8000ff2 <HAL_RCC_OscConfig+0x2ba>
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	08002378 	.word	0x08002378
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fb6e 	bl	80006c0 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b64      	cmp	r3, #100	; 0x64
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e280      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ff2:	4baf      	ldr	r3, [pc, #700]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x2a8>
 8000ffe:	e014      	b.n	800102a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fb5e 	bl	80006c0 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fb5a 	bl	80006c0 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	; 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e26c      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800101a:	4ba5      	ldr	r3, [pc, #660]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x2d0>
 8001026:	e000      	b.n	800102a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d060      	beq.n	80010f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b04      	cmp	r3, #4
 800103a:	d005      	beq.n	8001048 <HAL_RCC_OscConfig+0x310>
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b0c      	cmp	r3, #12
 8001040:	d119      	bne.n	8001076 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d116      	bne.n	8001076 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001048:	4b99      	ldr	r3, [pc, #612]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_RCC_OscConfig+0x328>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e249      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4b93      	ldr	r3, [pc, #588]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	061b      	lsls	r3, r3, #24
 800106e:	4990      	ldr	r1, [pc, #576]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001074:	e040      	b.n	80010f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d023      	beq.n	80010c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107e:	4b8c      	ldr	r3, [pc, #560]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a8b      	ldr	r2, [pc, #556]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108a:	f7ff fb19 	bl	80006c0 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001092:	f7ff fb15 	bl	80006c0 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e227      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a4:	4b82      	ldr	r3, [pc, #520]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0f0      	beq.n	8001092 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b0:	4b7f      	ldr	r3, [pc, #508]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	061b      	lsls	r3, r3, #24
 80010be:	497c      	ldr	r1, [pc, #496]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	604b      	str	r3, [r1, #4]
 80010c4:	e018      	b.n	80010f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c6:	4b7a      	ldr	r3, [pc, #488]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a79      	ldr	r2, [pc, #484]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 80010cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d2:	f7ff faf5 	bl	80006c0 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff faf1 	bl	80006c0 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e203      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010ec:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f0      	bne.n	80010da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d03c      	beq.n	800117e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d01c      	beq.n	8001146 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110c:	4b68      	ldr	r3, [pc, #416]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 800110e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001112:	4a67      	ldr	r2, [pc, #412]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800111c:	f7ff fad0 	bl	80006c0 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001124:	f7ff facc 	bl	80006c0 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1de      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001136:	4b5e      	ldr	r3, [pc, #376]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0ef      	beq.n	8001124 <HAL_RCC_OscConfig+0x3ec>
 8001144:	e01b      	b.n	800117e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001146:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800114c:	4a58      	ldr	r2, [pc, #352]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 800114e:	f023 0301 	bic.w	r3, r3, #1
 8001152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001156:	f7ff fab3 	bl	80006c0 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115e:	f7ff faaf 	bl	80006c0 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1c1      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001170:	4b4f      	ldr	r3, [pc, #316]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1ef      	bne.n	800115e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80a6 	beq.w	80012d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001190:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10d      	bne.n	80011b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 800119e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a0:	4a43      	ldr	r2, [pc, #268]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6593      	str	r3, [r2, #88]	; 0x58
 80011a8:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 80011aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b4:	2301      	movs	r3, #1
 80011b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b8:	4b3e      	ldr	r3, [pc, #248]	; (80012b4 <HAL_RCC_OscConfig+0x57c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d118      	bne.n	80011f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011c4:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <HAL_RCC_OscConfig+0x57c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a3a      	ldr	r2, [pc, #232]	; (80012b4 <HAL_RCC_OscConfig+0x57c>)
 80011ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d0:	f7ff fa76 	bl	80006c0 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d8:	f7ff fa72 	bl	80006c0 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e184      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ea:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <HAL_RCC_OscConfig+0x57c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <HAL_RCC_OscConfig+0x4d8>
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001204:	4a2a      	ldr	r2, [pc, #168]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800120e:	e024      	b.n	800125a <HAL_RCC_OscConfig+0x522>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2b05      	cmp	r3, #5
 8001216:	d110      	bne.n	800123a <HAL_RCC_OscConfig+0x502>
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 800121a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121e:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122e:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001238:	e00f      	b.n	800125a <HAL_RCC_OscConfig+0x522>
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 800123c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001242:	f023 0301 	bic.w	r3, r3, #1
 8001246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 800124c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001250:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001252:	f023 0304 	bic.w	r3, r3, #4
 8001256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d016      	beq.n	8001290 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001262:	f7ff fa2d 	bl	80006c0 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f7ff fa29 	bl	80006c0 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f241 3288 	movw	r2, #5000	; 0x1388
 8001278:	4293      	cmp	r3, r2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e139      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x578>)
 8001282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0ed      	beq.n	800126a <HAL_RCC_OscConfig+0x532>
 800128e:	e01a      	b.n	80012c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001290:	f7ff fa16 	bl	80006c0 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001296:	e00f      	b.n	80012b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001298:	f7ff fa12 	bl	80006c0 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d906      	bls.n	80012b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e122      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b8:	4b90      	ldr	r3, [pc, #576]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80012ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1e8      	bne.n	8001298 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c6:	7ffb      	ldrb	r3, [r7, #31]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012cc:	4b8b      	ldr	r3, [pc, #556]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80012ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d0:	4a8a      	ldr	r2, [pc, #552]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80012d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 8108 	beq.w	80014f2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	f040 80d0 	bne.w	800148c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012ec:	4b83      	ldr	r3, [pc, #524]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d130      	bne.n	8001362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	3b01      	subs	r3, #1
 800130c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800130e:	429a      	cmp	r2, r3
 8001310:	d127      	bne.n	8001362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800131e:	429a      	cmp	r2, r3
 8001320:	d11f      	bne.n	8001362 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800132c:	2a07      	cmp	r2, #7
 800132e:	bf14      	ite	ne
 8001330:	2201      	movne	r2, #1
 8001332:	2200      	moveq	r2, #0
 8001334:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001336:	4293      	cmp	r3, r2
 8001338:	d113      	bne.n	8001362 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	3b01      	subs	r3, #1
 8001348:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800134a:	429a      	cmp	r2, r3
 800134c:	d109      	bne.n	8001362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	085b      	lsrs	r3, r3, #1
 800135a:	3b01      	subs	r3, #1
 800135c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d06e      	beq.n	8001440 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d069      	beq.n	800143c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001368:	4b64      	ldr	r3, [pc, #400]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d105      	bne.n	8001380 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001374:	4b61      	ldr	r3, [pc, #388]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0b7      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001384:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a5c      	ldr	r2, [pc, #368]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800138e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001390:	f7ff f996 	bl	80006c0 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff f992 	bl	80006c0 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e0a4      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013aa:	4b54      	ldr	r3, [pc, #336]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b6:	4b51      	ldr	r3, [pc, #324]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	4b51      	ldr	r3, [pc, #324]	; (8001500 <HAL_RCC_OscConfig+0x7c8>)
 80013bc:	4013      	ands	r3, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013c6:	3a01      	subs	r2, #1
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	4311      	orrs	r1, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013d0:	0212      	lsls	r2, r2, #8
 80013d2:	4311      	orrs	r1, r2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013d8:	0852      	lsrs	r2, r2, #1
 80013da:	3a01      	subs	r2, #1
 80013dc:	0552      	lsls	r2, r2, #21
 80013de:	4311      	orrs	r1, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013e4:	0852      	lsrs	r2, r2, #1
 80013e6:	3a01      	subs	r2, #1
 80013e8:	0652      	lsls	r2, r2, #25
 80013ea:	4311      	orrs	r1, r2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013f0:	0912      	lsrs	r2, r2, #4
 80013f2:	0452      	lsls	r2, r2, #17
 80013f4:	430a      	orrs	r2, r1
 80013f6:	4941      	ldr	r1, [pc, #260]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013fc:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a3e      	ldr	r2, [pc, #248]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 8001402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001406:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001408:	4b3c      	ldr	r3, [pc, #240]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a3b      	ldr	r2, [pc, #236]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 800140e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001412:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001414:	f7ff f954 	bl	80006c0 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff f950 	bl	80006c0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e062      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142e:	4b33      	ldr	r3, [pc, #204]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800143a:	e05a      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e059      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d152      	bne.n	80014f2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 8001452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001456:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 800145e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001462:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001464:	f7ff f92c 	bl	80006c0 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff f928 	bl	80006c0 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e03a      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x734>
 800148a:	e032      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b0c      	cmp	r3, #12
 8001490:	d02d      	beq.n	80014ee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 8001498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800149c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d105      	bne.n	80014b6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	4a13      	ldr	r2, [pc, #76]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80014b0:	f023 0303 	bic.w	r3, r3, #3
 80014b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80014bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff f8fb 	bl	80006c0 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff f8f7 	bl	80006c0 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e009      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_RCC_OscConfig+0x7c4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x796>
 80014ec:	e001      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	f99d808c 	.word	0xf99d808c

08001504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0c8      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001518:	4b66      	ldr	r3, [pc, #408]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d910      	bls.n	8001548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0207 	bic.w	r2, r3, #7
 800152e:	4961      	ldr	r1, [pc, #388]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0b0      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d04c      	beq.n	80015ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d107      	bne.n	800156c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155c:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d121      	bne.n	80015ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e09e      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d107      	bne.n	8001584 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001574:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d115      	bne.n	80015ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e092      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d107      	bne.n	800159c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e086      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e07e      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 0203 	bic.w	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	493f      	ldr	r1, [pc, #252]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015be:	f7ff f87f 	bl	80006c0 <HAL_GetTick>
 80015c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c6:	f7ff f87b 	bl	80006c0 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e066      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015dc:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 020c 	and.w	r2, r3, #12
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d1eb      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fa:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	492c      	ldr	r1, [pc, #176]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d210      	bcs.n	800163c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 0207 	bic.w	r2, r3, #7
 8001622:	4924      	ldr	r1, [pc, #144]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e036      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4918      	ldr	r1, [pc, #96]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4910      	ldr	r1, [pc, #64]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800167a:	f000 f825 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 800167e:	4602      	mov	r2, r0
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	490c      	ldr	r1, [pc, #48]	; (80016bc <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	5ccb      	ldrb	r3, [r1, r3]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ffbe 	bl	8000620 <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80016a8:	7afb      	ldrb	r3, [r7, #11]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40022000 	.word	0x40022000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	08002378 	.word	0x08002378
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e0:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x34>
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d121      	bne.n	800173a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d11e      	bne.n	800173a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016fc:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	e005      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001718:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001724:	4a2b      	ldr	r2, [pc, #172]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10d      	bne.n	8001750 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d102      	bne.n	8001746 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	e004      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	2b08      	cmp	r3, #8
 800174a:	d101      	bne.n	8001750 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_RCC_GetSysClockFreq+0x114>)
 800174e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d134      	bne.n	80017c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001756:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d003      	beq.n	800176e <HAL_RCC_GetSysClockFreq+0xa6>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d003      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0xac>
 800176c:	e005      	b.n	800177a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001770:	617b      	str	r3, [r7, #20]
      break;
 8001772:	e005      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_RCC_GetSysClockFreq+0x114>)
 8001776:	617b      	str	r3, [r7, #20]
      break;
 8001778:	e002      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	617b      	str	r3, [r7, #20]
      break;
 800177e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	3301      	adds	r3, #1
 800178c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	fb02 f203 	mul.w	r2, r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	0e5b      	lsrs	r3, r3, #25
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	3301      	adds	r3, #1
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017c0:	69bb      	ldr	r3, [r7, #24]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08002388 	.word	0x08002388
 80017d8:	00f42400 	.word	0x00f42400
 80017dc:	007a1200 	.word	0x007a1200

080017e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017ec:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017f8:	f7ff fa3a 	bl	8000c70 <HAL_PWREx_GetVoltageRange>
 80017fc:	6178      	str	r0, [r7, #20]
 80017fe:	e014      	b.n	800182a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	4a24      	ldr	r2, [pc, #144]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180a:	6593      	str	r3, [r2, #88]	; 0x58
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001818:	f7ff fa2a 	bl	8000c70 <HAL_PWREx_GetVoltageRange>
 800181c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001828:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001830:	d10b      	bne.n	800184a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b80      	cmp	r3, #128	; 0x80
 8001836:	d919      	bls.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2ba0      	cmp	r3, #160	; 0xa0
 800183c:	d902      	bls.n	8001844 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800183e:	2302      	movs	r3, #2
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	e013      	b.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001844:	2301      	movs	r3, #1
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	e010      	b.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b80      	cmp	r3, #128	; 0x80
 800184e:	d902      	bls.n	8001856 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001850:	2303      	movs	r3, #3
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e00a      	b.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b80      	cmp	r3, #128	; 0x80
 800185a:	d102      	bne.n	8001862 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800185c:	2302      	movs	r3, #2
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	e004      	b.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b70      	cmp	r3, #112	; 0x70
 8001866:	d101      	bne.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001868:	2301      	movs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 0207 	bic.w	r2, r3, #7
 8001874:	4909      	ldr	r1, [pc, #36]	; (800189c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	40022000 	.word	0x40022000

080018a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80018a8:	2300      	movs	r3, #0
 80018aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80018ac:	2300      	movs	r3, #0
 80018ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d041      	beq.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80018c4:	d02a      	beq.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80018c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80018ca:	d824      	bhi.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80018cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018d0:	d008      	beq.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80018d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018d6:	d81e      	bhi.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00a      	beq.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80018dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e0:	d010      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80018e2:	e018      	b.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80018e4:	4b86      	ldr	r3, [pc, #536]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4a85      	ldr	r2, [pc, #532]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80018ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80018f0:	e015      	b.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fabb 	bl	8001e74 <RCCEx_PLLSAI1_Config>
 80018fe:	4603      	mov	r3, r0
 8001900:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001902:	e00c      	b.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3320      	adds	r3, #32
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f000 fba6 	bl	800205c <RCCEx_PLLSAI2_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001914:	e003      	b.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	74fb      	strb	r3, [r7, #19]
      break;
 800191a:	e000      	b.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800191c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800191e:	7cfb      	ldrb	r3, [r7, #19]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10b      	bne.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001924:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001932:	4973      	ldr	r1, [pc, #460]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001934:	4313      	orrs	r3, r2
 8001936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800193a:	e001      	b.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d041      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001950:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001954:	d02a      	beq.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001956:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800195a:	d824      	bhi.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800195c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001960:	d008      	beq.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001966:	d81e      	bhi.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00a      	beq.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001970:	d010      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001972:	e018      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001974:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a61      	ldr	r2, [pc, #388]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800197a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001980:	e015      	b.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3304      	adds	r3, #4
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fa73 	bl	8001e74 <RCCEx_PLLSAI1_Config>
 800198e:	4603      	mov	r3, r0
 8001990:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001992:	e00c      	b.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3320      	adds	r3, #32
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fb5e 	bl	800205c <RCCEx_PLLSAI2_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019a4:	e003      	b.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	74fb      	strb	r3, [r7, #19]
      break;
 80019aa:	e000      	b.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80019ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80019ae:	7cfb      	ldrb	r3, [r7, #19]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10b      	bne.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019b4:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019c2:	494f      	ldr	r1, [pc, #316]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80019ca:	e001      	b.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019cc:	7cfb      	ldrb	r3, [r7, #19]
 80019ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80a0 	beq.w	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80019f2:	2300      	movs	r3, #0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f8:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	4a40      	ldr	r2, [pc, #256]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6593      	str	r3, [r2, #88]	; 0x58
 8001a04:	4b3e      	ldr	r3, [pc, #248]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a10:	2301      	movs	r3, #1
 8001a12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a14:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a3a      	ldr	r2, [pc, #232]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a20:	f7fe fe4e 	bl	80006c0 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a26:	e009      	b.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a28:	f7fe fe4a 	bl	80006c0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d902      	bls.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	74fb      	strb	r3, [r7, #19]
        break;
 8001a3a:	e005      	b.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a3c:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ef      	beq.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001a48:	7cfb      	ldrb	r3, [r7, #19]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d15c      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01f      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d019      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7e:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a98:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d016      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7fe fe09 	bl	80006c0 <HAL_GetTick>
 8001aae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab0:	e00b      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7fe fe05 	bl	80006c0 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d902      	bls.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	74fb      	strb	r3, [r7, #19]
            break;
 8001ac8:	e006      	b.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0ec      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ad8:	7cfb      	ldrb	r3, [r7, #19]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aee:	4904      	ldr	r1, [pc, #16]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001af6:	e009      	b.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001af8:	7cfb      	ldrb	r3, [r7, #19]
 8001afa:	74bb      	strb	r3, [r7, #18]
 8001afc:	e006      	b.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b08:	7cfb      	ldrb	r3, [r7, #19]
 8001b0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0c:	7c7b      	ldrb	r3, [r7, #17]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d105      	bne.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b12:	4b9e      	ldr	r3, [pc, #632]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	4a9d      	ldr	r2, [pc, #628]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00a      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b2a:	4b98      	ldr	r3, [pc, #608]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b30:	f023 0203 	bic.w	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	4994      	ldr	r1, [pc, #592]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00a      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b4c:	4b8f      	ldr	r3, [pc, #572]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	f023 020c 	bic.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5a:	498c      	ldr	r1, [pc, #560]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b6e:	4b87      	ldr	r3, [pc, #540]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	4983      	ldr	r1, [pc, #524]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00a      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b90:	4b7e      	ldr	r3, [pc, #504]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	497b      	ldr	r1, [pc, #492]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001bb2:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc0:	4972      	ldr	r1, [pc, #456]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00a      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001bd4:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	496a      	ldr	r1, [pc, #424]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00a      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001bf6:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	4961      	ldr	r1, [pc, #388]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00a      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c18:	4b5c      	ldr	r3, [pc, #368]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	4959      	ldr	r1, [pc, #356]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00a      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c3a:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c48:	4950      	ldr	r1, [pc, #320]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00a      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c5c:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	4948      	ldr	r1, [pc, #288]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00a      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c7e:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	493f      	ldr	r1, [pc, #252]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d028      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cae:	4937      	ldr	r1, [pc, #220]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cbe:	d106      	bne.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cc0:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4a31      	ldr	r2, [pc, #196]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cca:	60d3      	str	r3, [r2, #12]
 8001ccc:	e011      	b.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f8c8 	bl	8001e74 <RCCEx_PLLSAI1_Config>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001ce8:	7cfb      	ldrb	r3, [r7, #19]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001cee:	7cfb      	ldrb	r3, [r7, #19]
 8001cf0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d028      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	491f      	ldr	r1, [pc, #124]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d28:	60d3      	str	r3, [r2, #12]
 8001d2a:	e011      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 f899 	bl	8001e74 <RCCEx_PLLSAI1_Config>
 8001d42:	4603      	mov	r3, r0
 8001d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d46:	7cfb      	ldrb	r3, [r7, #19]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001d4c:	7cfb      	ldrb	r3, [r7, #19]
 8001d4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d02b      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d7a:	d109      	bne.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4a02      	ldr	r2, [pc, #8]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d86:	60d3      	str	r3, [r2, #12]
 8001d88:	e014      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f867 	bl	8001e74 <RCCEx_PLLSAI1_Config>
 8001da6:	4603      	mov	r3, r0
 8001da8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001daa:	7cfb      	ldrb	r3, [r7, #19]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d02f      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dce:	4928      	ldr	r1, [pc, #160]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dde:	d10d      	bne.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3304      	adds	r3, #4
 8001de4:	2102      	movs	r1, #2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f844 	bl	8001e74 <RCCEx_PLLSAI1_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d014      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001df6:	7cfb      	ldrb	r3, [r7, #19]
 8001df8:	74bb      	strb	r3, [r7, #18]
 8001dfa:	e011      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3320      	adds	r3, #32
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 f925 	bl	800205c <RCCEx_PLLSAI2_Config>
 8001e12:	4603      	mov	r3, r0
 8001e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e16:	7cfb      	ldrb	r3, [r7, #19]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001e1c:	7cfb      	ldrb	r3, [r7, #19]
 8001e1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00a      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e3a:	490d      	ldr	r1, [pc, #52]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e5e:	4904      	ldr	r1, [pc, #16]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001e66:	7cbb      	ldrb	r3, [r7, #18]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000

08001e74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e82:	4b75      	ldr	r3, [pc, #468]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d018      	beq.n	8001ec0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001e8e:	4b72      	ldr	r3, [pc, #456]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0203 	and.w	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d10d      	bne.n	8001eba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
       ||
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d009      	beq.n	8001eba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001ea6:	4b6c      	ldr	r3, [pc, #432]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
       ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d047      	beq.n	8001f4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e044      	b.n	8001f4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d018      	beq.n	8001efa <RCCEx_PLLSAI1_Config+0x86>
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d825      	bhi.n	8001f18 <RCCEx_PLLSAI1_Config+0xa4>
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d002      	beq.n	8001ed6 <RCCEx_PLLSAI1_Config+0x62>
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d009      	beq.n	8001ee8 <RCCEx_PLLSAI1_Config+0x74>
 8001ed4:	e020      	b.n	8001f18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ed6:	4b60      	ldr	r3, [pc, #384]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d11d      	bne.n	8001f1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ee6:	e01a      	b.n	8001f1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001ee8:	4b5b      	ldr	r3, [pc, #364]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d116      	bne.n	8001f22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef8:	e013      	b.n	8001f22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001efa:	4b57      	ldr	r3, [pc, #348]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10f      	bne.n	8001f26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f06:	4b54      	ldr	r3, [pc, #336]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d109      	bne.n	8001f26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001f16:	e006      	b.n	8001f26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f1c:	e004      	b.n	8001f28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f1e:	bf00      	nop
 8001f20:	e002      	b.n	8001f28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f22:	bf00      	nop
 8001f24:	e000      	b.n	8001f28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10d      	bne.n	8001f4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6819      	ldr	r1, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	430b      	orrs	r3, r1
 8001f44:	4944      	ldr	r1, [pc, #272]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d17d      	bne.n	800204c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f50:	4b41      	ldr	r3, [pc, #260]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a40      	ldr	r2, [pc, #256]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f5c:	f7fe fbb0 	bl	80006c0 <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f62:	e009      	b.n	8001f78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f64:	f7fe fbac 	bl	80006c0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d902      	bls.n	8001f78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	73fb      	strb	r3, [r7, #15]
        break;
 8001f76:	e005      	b.n	8001f84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f78:	4b37      	ldr	r3, [pc, #220]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ef      	bne.n	8001f64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d160      	bne.n	800204c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d111      	bne.n	8001fb4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f90:	4b31      	ldr	r3, [pc, #196]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6892      	ldr	r2, [r2, #8]
 8001fa0:	0211      	lsls	r1, r2, #8
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68d2      	ldr	r2, [r2, #12]
 8001fa6:	0912      	lsrs	r2, r2, #4
 8001fa8:	0452      	lsls	r2, r2, #17
 8001faa:	430a      	orrs	r2, r1
 8001fac:	492a      	ldr	r1, [pc, #168]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	610b      	str	r3, [r1, #16]
 8001fb2:	e027      	b.n	8002004 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d112      	bne.n	8001fe0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fba:	4b27      	ldr	r3, [pc, #156]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001fc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6892      	ldr	r2, [r2, #8]
 8001fca:	0211      	lsls	r1, r2, #8
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6912      	ldr	r2, [r2, #16]
 8001fd0:	0852      	lsrs	r2, r2, #1
 8001fd2:	3a01      	subs	r2, #1
 8001fd4:	0552      	lsls	r2, r2, #21
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	491f      	ldr	r1, [pc, #124]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	610b      	str	r3, [r1, #16]
 8001fde:	e011      	b.n	8002004 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6892      	ldr	r2, [r2, #8]
 8001ff0:	0211      	lsls	r1, r2, #8
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6952      	ldr	r2, [r2, #20]
 8001ff6:	0852      	lsrs	r2, r2, #1
 8001ff8:	3a01      	subs	r2, #1
 8001ffa:	0652      	lsls	r2, r2, #25
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	4916      	ldr	r1, [pc, #88]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002000:	4313      	orrs	r3, r2
 8002002:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a13      	ldr	r2, [pc, #76]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 800200a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800200e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002010:	f7fe fb56 	bl	80006c0 <HAL_GetTick>
 8002014:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002016:	e009      	b.n	800202c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002018:	f7fe fb52 	bl	80006c0 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d902      	bls.n	800202c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	73fb      	strb	r3, [r7, #15]
          break;
 800202a:	e005      	b.n	8002038 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ef      	beq.n	8002018 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	4904      	ldr	r1, [pc, #16]	; (8002058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000

0800205c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800206a:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d018      	beq.n	80020a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002076:	4b67      	ldr	r3, [pc, #412]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f003 0203 	and.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d10d      	bne.n	80020a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
       ||
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800208e:	4b61      	ldr	r3, [pc, #388]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
       ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d047      	beq.n	8002132 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	e044      	b.n	8002132 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d018      	beq.n	80020e2 <RCCEx_PLLSAI2_Config+0x86>
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d825      	bhi.n	8002100 <RCCEx_PLLSAI2_Config+0xa4>
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d002      	beq.n	80020be <RCCEx_PLLSAI2_Config+0x62>
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d009      	beq.n	80020d0 <RCCEx_PLLSAI2_Config+0x74>
 80020bc:	e020      	b.n	8002100 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80020be:	4b55      	ldr	r3, [pc, #340]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d11d      	bne.n	8002106 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ce:	e01a      	b.n	8002106 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80020d0:	4b50      	ldr	r3, [pc, #320]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d116      	bne.n	800210a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e0:	e013      	b.n	800210a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80020e2:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020ee:	4b49      	ldr	r3, [pc, #292]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80020fe:	e006      	b.n	800210e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      break;
 8002104:	e004      	b.n	8002110 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002106:	bf00      	nop
 8002108:	e002      	b.n	8002110 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800210a:	bf00      	nop
 800210c:	e000      	b.n	8002110 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800210e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002116:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6819      	ldr	r1, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	430b      	orrs	r3, r1
 800212c:	4939      	ldr	r1, [pc, #228]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800212e:	4313      	orrs	r3, r2
 8002130:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d167      	bne.n	8002208 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a35      	ldr	r2, [pc, #212]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800213e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002144:	f7fe fabc 	bl	80006c0 <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800214a:	e009      	b.n	8002160 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800214c:	f7fe fab8 	bl	80006c0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d902      	bls.n	8002160 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	73fb      	strb	r3, [r7, #15]
        break;
 800215e:	e005      	b.n	800216c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002160:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ef      	bne.n	800214c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d14a      	bne.n	8002208 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d111      	bne.n	800219c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002178:	4b26      	ldr	r3, [pc, #152]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6892      	ldr	r2, [r2, #8]
 8002188:	0211      	lsls	r1, r2, #8
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68d2      	ldr	r2, [r2, #12]
 800218e:	0912      	lsrs	r2, r2, #4
 8002190:	0452      	lsls	r2, r2, #17
 8002192:	430a      	orrs	r2, r1
 8002194:	491f      	ldr	r1, [pc, #124]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	614b      	str	r3, [r1, #20]
 800219a:	e011      	b.n	80021c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6892      	ldr	r2, [r2, #8]
 80021ac:	0211      	lsls	r1, r2, #8
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6912      	ldr	r2, [r2, #16]
 80021b2:	0852      	lsrs	r2, r2, #1
 80021b4:	3a01      	subs	r2, #1
 80021b6:	0652      	lsls	r2, r2, #25
 80021b8:	430a      	orrs	r2, r1
 80021ba:	4916      	ldr	r1, [pc, #88]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a13      	ldr	r2, [pc, #76]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7fe fa78 	bl	80006c0 <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80021d2:	e009      	b.n	80021e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80021d4:	f7fe fa74 	bl	80006c0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d902      	bls.n	80021e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	73fb      	strb	r3, [r7, #15]
          break;
 80021e6:	e005      	b.n	80021f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ef      	beq.n	80021d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4904      	ldr	r1, [pc, #16]	; (8002214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002204:	4313      	orrs	r3, r2
 8002206:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e042      	b.n	80022b0 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	795b      	ldrb	r3, [r3, #5]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe f932 	bl	80004a4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0204 	orr.w	r2, r2, #4
 8002254:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b40      	cmp	r3, #64	; 0x40
 8002262:	d104      	bne.n	800226e <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2204      	movs	r2, #4
 8002268:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e020      	b.n	80022b0 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800226e:	f7fe fa27 	bl	80006c0 <HAL_GetTick>
 8002272:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002274:	e00e      	b.n	8002294 <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002276:	f7fe fa23 	bl	80006c0 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d907      	bls.n	8002294 <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e00d      	b.n	80022b0 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d0e9      	beq.n	8002276 <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <__libc_init_array>:
 80022b8:	b570      	push	{r4, r5, r6, lr}
 80022ba:	4d0d      	ldr	r5, [pc, #52]	; (80022f0 <__libc_init_array+0x38>)
 80022bc:	4c0d      	ldr	r4, [pc, #52]	; (80022f4 <__libc_init_array+0x3c>)
 80022be:	1b64      	subs	r4, r4, r5
 80022c0:	10a4      	asrs	r4, r4, #2
 80022c2:	2600      	movs	r6, #0
 80022c4:	42a6      	cmp	r6, r4
 80022c6:	d109      	bne.n	80022dc <__libc_init_array+0x24>
 80022c8:	4d0b      	ldr	r5, [pc, #44]	; (80022f8 <__libc_init_array+0x40>)
 80022ca:	4c0c      	ldr	r4, [pc, #48]	; (80022fc <__libc_init_array+0x44>)
 80022cc:	f000 f820 	bl	8002310 <_init>
 80022d0:	1b64      	subs	r4, r4, r5
 80022d2:	10a4      	asrs	r4, r4, #2
 80022d4:	2600      	movs	r6, #0
 80022d6:	42a6      	cmp	r6, r4
 80022d8:	d105      	bne.n	80022e6 <__libc_init_array+0x2e>
 80022da:	bd70      	pop	{r4, r5, r6, pc}
 80022dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e0:	4798      	blx	r3
 80022e2:	3601      	adds	r6, #1
 80022e4:	e7ee      	b.n	80022c4 <__libc_init_array+0xc>
 80022e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ea:	4798      	blx	r3
 80022ec:	3601      	adds	r6, #1
 80022ee:	e7f2      	b.n	80022d6 <__libc_init_array+0x1e>
 80022f0:	080023b8 	.word	0x080023b8
 80022f4:	080023b8 	.word	0x080023b8
 80022f8:	080023b8 	.word	0x080023b8
 80022fc:	080023bc 	.word	0x080023bc

08002300 <memset>:
 8002300:	4402      	add	r2, r0
 8002302:	4603      	mov	r3, r0
 8002304:	4293      	cmp	r3, r2
 8002306:	d100      	bne.n	800230a <memset+0xa>
 8002308:	4770      	bx	lr
 800230a:	f803 1b01 	strb.w	r1, [r3], #1
 800230e:	e7f9      	b.n	8002304 <memset+0x4>

08002310 <_init>:
 8002310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002312:	bf00      	nop
 8002314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002316:	bc08      	pop	{r3}
 8002318:	469e      	mov	lr, r3
 800231a:	4770      	bx	lr

0800231c <_fini>:
 800231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231e:	bf00      	nop
 8002320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002322:	bc08      	pop	{r3}
 8002324:	469e      	mov	lr, r3
 8002326:	4770      	bx	lr
